name: Deploy to Production

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run comprehensive tests
      run: |
        python run_tests.py
    
    - name: Security scan
      run: |
        # Install bandit for security scanning
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        if [ -s bandit-report.json ]; then
          echo "Security issues found:"
          cat bandit-report.json
        fi
    
    - name: Web validation
      run: |
        python web_api.py &
        sleep 10
        curl -f http://localhost:8000/api/health
        
    - name: Performance baseline check
      run: |
        # Simple performance check - API response time
        time curl -f http://localhost:8000/api/health

  deploy-frontend-production:
    needs: pre-deployment-checks
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Backup current frontend
      run: |
        # Create backup of current production files
        aws s3 sync s3://geometry-engine-frontend-prod s3://geometry-engine-frontend-prod-backup --delete
    
    - name: Deploy static files to S3
      run: |
        # Deploy new files
        aws s3 sync demo.html s3://geometry-engine-frontend-prod/
        aws s3 cp demo.html s3://geometry-engine-frontend-prod/index.html
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
          --paths "/*"
    
    - name: Verify deployment
      run: |
        # Wait for CloudFront invalidation
        sleep 30
        # Test production URL (replace with actual domain)
        curl -f https://geometry-engine-api.com || echo "Frontend check failed"

  deploy-backend-lambda-production:
    needs: pre-deployment-checks
    runs-on: ubuntu-latest
    environment: production
    if: vars.BACKEND_TYPE == 'lambda'
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Create production deployment package
      run: |
        mkdir lambda_package
        pip install -r requirements.txt -t lambda_package/
        cp web_api.py geometry_engine.py lambda_package/
        cp config/environments.json lambda_package/config/
        
        # Add Lambda handler
        echo "
        import os
        os.environ['ENVIRONMENT'] = 'production'
        from mangum import Mangum
        handler = Mangum(app)
        " >> lambda_package/web_api.py
        
        # Create zip
        cd lambda_package
        zip -r ../lambda-deployment-prod.zip .
        cd ..
    
    - name: Create new Lambda version
      run: |
        # Update function code
        aws lambda update-function-code \
          --function-name geometry-engine-api-prod \
          --zip-file fileb://lambda-deployment-prod.zip
        
        # Publish new version
        NEW_VERSION=$(aws lambda publish-version \
          --function-name geometry-engine-api-prod \
          --query 'Version' --output text)
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Update alias to new version
      run: |
        # Update LIVE alias to point to new version
        aws lambda update-alias \
          --function-name geometry-engine-api-prod \
          --name LIVE \
          --function-version $NEW_VERSION
    
    - name: Health check
      run: |
        sleep 10
        # Test production API endpoint
        curl -f https://api.geometry-engine-api.com/api/health || echo "API health check failed"

  deploy-backend-ecs-production:
    needs: pre-deployment-checks
    runs-on: ubuntu-latest
    environment: production
    if: vars.BACKEND_TYPE == 'ecs'
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: geometry-engine-api
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        # Build production image with environment
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg ENVIRONMENT=production .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Update ECS service with rolling deployment
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: geometry-engine-api
        IMAGE_TAG: prod-${{ github.sha }}
      run: |
        # Get current task definition
        aws ecs describe-task-definition \
          --task-definition geometry-engine-api-prod \
          --query taskDefinition > task-def.json
        
        # Update image URI and remove task definition ARN/revision/status
        jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
          'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy) | .containerDefinitions[0].image = $IMAGE' \
          task-def.json > new-task-def.json
        
        # Register new task definition
        NEW_TASK_DEF=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' --output text)
        
        # Update service with rolling deployment
        aws ecs update-service \
          --cluster geometry-engine-prod \
          --service geometry-engine-api-prod \
          --task-definition $NEW_TASK_DEF \
          --force-new-deployment
        
        echo "NEW_TASK_DEF=$NEW_TASK_DEF" >> $GITHUB_ENV
    
    - name: Wait for deployment to complete
      run: |
        # Wait for service to stabilize
        aws ecs wait services-stable \
          --cluster geometry-engine-prod \
          --services geometry-engine-api-prod
    
    - name: Health check
      run: |
        # Test production API endpoint
        curl -f https://api.geometry-engine-api.com/api/health || echo "API health check failed"

  post-deployment-verification:
    needs: [deploy-frontend-production, deploy-backend-lambda-production, deploy-backend-ecs-production]
    if: always() && (needs.deploy-frontend-production.result == 'success' && (needs.deploy-backend-lambda-production.result == 'success' || needs.deploy-backend-lambda-production.result == 'skipped') && (needs.deploy-backend-ecs-production.result == 'success' || needs.deploy-backend-ecs-production.result == 'skipped'))
    runs-on: ubuntu-latest
    steps:
    - name: Comprehensive production health check
      run: |
        echo "Running production verification..."
        
        # Test frontend
        curl -f https://geometry-engine-api.com || echo "Frontend check failed"
        
        # Test API health
        curl -f https://api.geometry-engine-api.com/api/health || echo "API health check failed"
        
        # Test API functionality
        curl -X POST https://api.geometry-engine-api.com/api/sphere \
          -H "Content-Type: application/json" \
          -d '{"dimensions": 3, "radius": 1}' || echo "API functionality check failed"
    
    - name: Create deployment tag
      run: |
        echo "Creating deployment tag..."
        # Tag would be created here in a real repository
        echo "production-deploy-$(date '+%Y%m%d-%H%M%S')"

  rollback-on-failure:
    needs: [deploy-frontend-production, deploy-backend-lambda-production, deploy-backend-ecs-production, post-deployment-verification]
    if: failure()
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Rollback frontend
      run: |
        echo "Rolling back frontend..."
        aws s3 sync s3://geometry-engine-frontend-prod-backup s3://geometry-engine-frontend-prod --delete
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
          --paths "/*"
    
    - name: Rollback Lambda (if applicable)
      if: vars.BACKEND_TYPE == 'lambda'
      run: |
        echo "Rolling back Lambda..."
        # Get previous version
        PREVIOUS_VERSION=$(aws lambda list-aliases \
          --function-name geometry-engine-api-prod \
          --query 'Aliases[?Name==`LIVE`].FunctionVersion' --output text)
        
        # This would rollback to previous version in a real scenario
        echo "Would rollback to version: $PREVIOUS_VERSION"
    
    - name: Rollback ECS (if applicable)
      if: vars.BACKEND_TYPE == 'ecs'
      run: |
        echo "Rolling back ECS..."
        # Get previous task definition (this is simplified)
        echo "Would rollback ECS service to previous task definition"
    
    - name: Notify about rollback
      run: |
        echo "🚨 Production deployment failed and rollback initiated"
        echo "Please check logs and fix issues before next deployment"