# Comprehensive Web Standards Validation Pipeline
# Ensures N-Dimensional Geometry Engine meets professional web standards
# Based on WEB_DEPLOYMENT_GUIDE.md best practices

name: 🌐 Web Standards Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.html'
      - '**.css'
      - '**.js'
      - 'web_api.py'
      - 'demo.html'
  push:
    branches: [ main, develop ]
    paths:
      - '**.html'
      - '**.css'
      - '**.js'
      - 'web_api.py'
      - 'demo.html'

jobs:
  # Job 1: Core Web Validation
  validate-web:
    runs-on: ubuntu-latest
    name: 🔍 HTML5/CSS Validation
    
    steps:
    - uses: actions/checkout@v4
    
    # HTML5 Validation
    - name: 📋 HTML5 Validation
      uses: Cyb3r-Jak3/html5validator-action@v7.2.0
      with:
        root: .
        extra: --ignore-re "backdrop-filter"
        format: text
        log_level: INFO
    
    # Check for inline styles/scripts (best practice)
    - name: 🎨 Check for Inline Styles/Scripts
      run: |
        echo "Checking for inline styles..."
        if grep -n "style=" demo.html | grep -v "<!--"; then
          echo "⚠️  WARNING: Inline styles found. Consider moving to external CSS."
        fi
        
        echo "Checking for inline scripts..."
        if grep -n "onclick\|onload\|onchange" demo.html | grep -v "<!--"; then
          echo "⚠️  WARNING: Inline event handlers found. Consider using addEventListener."
        fi
    
    # Security: Check for exposed secrets
    - name: 🔒 Security - Secret Scanning
      run: |
        # Check for potential secrets
        if grep -r "ghp_\|ghs_\|ghu_" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=venv --exclude="*.md"; then
          echo "❌ ERROR: Possible GitHub token found!"
          exit 1
        fi
        if grep -r "AKIA[0-9A-Z]\{16\}" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=venv --exclude="*.md"; then
          echo "❌ ERROR: Possible AWS key found!"
          exit 1
        fi
        if grep -r "AIza[0-9A-Za-z_-]\{35\}" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=venv --exclude="*.md"; then
          echo "❌ ERROR: Possible API key found!"
          exit 1
        fi
        echo "✅ No secrets detected"
    
    # File size checks for web performance
    - name: 📊 Performance - File Size Check
      run: |
        # Error if HTML/JS/CSS files are over 100KB
        for file in $(find . -name "*.html" -o -name "*.js" -o -name "*.css" | grep -v venv | grep -v node_modules); do
          size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
          if [ "$size" -gt 102400 ]; then
            echo "❌ ERROR: $file is over 100KB ($(du -h $file | cut -f1))"
            exit 1
          fi
        done
        echo "✅ File sizes OK"
    
    # Check for required meta tags
    - name: 🏷️ Check Required Meta Tags
      run: |
        echo "Checking demo.html for required meta tags..."
        required_tags=(
          '<meta charset='
          '<meta name="viewport"'
          '<meta name="description"'
          '<title>'
        )
        
        for tag in "${required_tags[@]}"; do
          if ! grep -q "$tag" demo.html; then
            echo "❌ ERROR: Missing required meta tag: $tag"
            exit 1
          fi
        done
        echo "✅ All required meta tags present"

  # Job 2: Performance Testing
  performance:
    runs-on: ubuntu-latest
    name: ⚡ Performance & Best Practices
    
    steps:
    - uses: actions/checkout@v4
    
    # Start web server
    - name: 🚀 Start Web Server
      run: |
        python -m http.server 8000 &
        sleep 3
    
    # Lighthouse CI
    - name: 🏠 Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:8000/demo.html
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: ./.lighthouserc.json
      continue-on-error: true

  # Job 3: Accessibility Testing
  accessibility:
    runs-on: ubuntu-latest
    name: ♿ Accessibility Testing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 📦 Install Pa11y
      run: |
        npm install -g pa11y
    
    - name: 🚀 Start Web Server
      run: |
        python -m http.server 8000 &
        sleep 3
    
    - name: ♿ Run Pa11y Accessibility Tests
      run: |
        # Create config if it doesn't exist
        if [ ! -f .pa11yrc ]; then
          echo '{
            "chromeLaunchConfig": {
              "args": ["--no-sandbox", "--disable-dev-shm-usage"]
            },
            "runners": ["htmlcs"],
            "standard": "WCAG2AA",
            "timeout": 30000
          }' > .pa11yrc
        fi
        
        # Run Pa11y
        pa11y http://localhost:8000/demo.html --config .pa11yrc || true
        
        # Check for critical issues
        pa11y http://localhost:8000/demo.html --config .pa11yrc --reporter json > pa11y-results.json || true
        
        # Analyze results
        if [ -f pa11y-results.json ]; then
          errors=$(jq '.issues | map(select(.type == "error")) | length' pa11y-results.json)
          if [ "$errors" -gt 0 ]; then
            echo "❌ Found $errors accessibility errors"
            jq '.issues | map(select(.type == "error"))' pa11y-results.json
            exit 1
          else
            echo "✅ No critical accessibility issues found"
          fi
        fi

  # Job 4: API Security Headers
  api-security:
    runs-on: ubuntu-latest
    name: 🛡️ API Security Headers
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🚀 Start API Server
      run: |
        uvicorn web_api:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: 🔍 Check Security Headers
      run: |
        echo "Checking API security headers..."
        
        # Test API health endpoint
        response=$(curl -s -I http://localhost:8000/api/health)
        
        # Check for security headers
        headers_to_check=(
          "X-Content-Type-Options: nosniff"
          "X-Frame-Options"
          "X-XSS-Protection"
          "Strict-Transport-Security"
        )
        
        for header in "${headers_to_check[@]}"; do
          if ! echo "$response" | grep -qi "$header"; then
            echo "⚠️  WARNING: Missing security header: $header"
          fi
        done
        
        # Check CORS configuration
        cors_response=$(curl -s -I -H "Origin: https://example.com" http://localhost:8000/api/health)
        if echo "$cors_response" | grep -qi "Access-Control-Allow-Origin: \*"; then
          echo "⚠️  WARNING: CORS allows all origins (*). Consider restricting for production."
        fi
        
        echo "✅ Security header check complete"

  # Job 5: Browser Compatibility
  compatibility:
    runs-on: ubuntu-latest
    name: 🌍 Browser Compatibility Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🔍 Check for Modern JavaScript Features
      run: |
        echo "Checking for browser compatibility issues..."
        
        # Check for ES6+ features that might need transpiling
        if grep -r "const\|let\|=>\|class\s\|async\|await" demo.html --include="*.js"; then
          echo "ℹ️  INFO: Modern JavaScript features detected. Ensure browser support or use transpilation."
        fi
        
        # Check for CSS Grid or Flexbox
        if grep -r "display:\s*grid\|display:\s*flex" . --include="*.css" --include="*.html"; then
          echo "ℹ️  INFO: Modern CSS layout detected. Good for modern browsers."
        fi
        
        echo "✅ Compatibility check complete"

  # Summary Report
  validation-summary:
    name: 📊 Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-web, performance, accessibility, api-security, compatibility]
    if: always()
    
    steps:
      - name: 📊 Generate Summary Report
        run: |
          echo "# 🌐 Web Standards Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- HTML5/CSS Validation: ${{ needs.validate-web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Testing: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Testing: ${{ needs.accessibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- API Security Headers: ${{ needs.api-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Browser Compatibility: ${{ needs.compatibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 N-Dimensional Geometry Engine Web Standards Check Complete!" >> $GITHUB_STEP_SUMMARY