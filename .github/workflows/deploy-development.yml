name: Deploy to Development

on:
  push:
    branches: [ develop ]

env:
  AWS_REGION: us-east-1
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        python run_tests.py
    
    - name: Web validation
      run: |
        python web_api.py &
        sleep 10
        curl -f http://localhost:8000/api/health

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy static files to S3
      run: |
        # Copy static files to S3 bucket
        aws s3 sync demo.html s3://geometry-engine-frontend-dev/
        aws s3 cp demo.html s3://geometry-engine-frontend-dev/index.html
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_DEV }} \
          --paths "/*"

  deploy-backend-lambda:
    needs: test
    runs-on: ubuntu-latest
    if: vars.BACKEND_TYPE == 'lambda'
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Create deployment package
      run: |
        mkdir lambda_package
        pip install -r requirements.txt -t lambda_package/
        cp web_api.py geometry_engine.py lambda_package/
        
        # Add Lambda handler
        echo "
        from mangum import Mangum
        handler = Mangum(app)
        " >> lambda_package/web_api.py
        
        # Create zip
        cd lambda_package
        zip -r ../lambda-deployment-dev.zip .
        cd ..
    
    - name: Deploy to Lambda
      run: |
        aws lambda update-function-code \
          --function-name geometry-engine-api-dev \
          --zip-file fileb://lambda-deployment-dev.zip

  deploy-backend-ecs:
    needs: test
    runs-on: ubuntu-latest  
    if: vars.BACKEND_TYPE == 'ecs'
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: geometry-engine-api
        IMAGE_TAG: dev-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Update ECS service
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: geometry-engine-api
        IMAGE_TAG: dev-${{ github.sha }}
      run: |
        # Update task definition with new image
        aws ecs describe-task-definition \
          --task-definition geometry-engine-api-dev \
          --query taskDefinition > task-def.json
        
        # Update image URI in task definition
        jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
          '.containerDefinitions[0].image = $IMAGE' task-def.json > new-task-def.json
        
        # Register new task definition
        aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json
        
        # Update service
        aws ecs update-service \
          --cluster geometry-engine-dev \
          --service geometry-engine-api-dev \
          --task-definition geometry-engine-api-dev

  create-pr-to-production:
    needs: [deploy-frontend, deploy-backend-lambda, deploy-backend-ecs]
    if: always() && (needs.deploy-frontend.result == 'success' && (needs.deploy-backend-lambda.result == 'success' || needs.deploy-backend-lambda.result == 'skipped') && (needs.deploy-backend-ecs.result == 'success' || needs.deploy-backend-ecs.result == 'skipped'))
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Create Pull Request to Production
      run: |
        # Create PR from develop to main
        gh pr create \
          --title "ðŸš€ Deploy to Production - $(date '+%Y-%m-%d %H:%M')" \
          --body "$(cat <<'EOF'
        ## ðŸš€ Production Deployment Request
        
        **Source Branch:** develop
        **Target Branch:** main
        **Status:** âœ… Development deployment successful
        
        ### Changes Included
        - Latest commits from develop branch
        - All tests passing
        - Web validation successful
        - Development environment deployed and verified
        
        ### Pre-deployment Checklist
        - [ ] Review all changes
        - [ ] Verify development environment functionality  
        - [ ] Confirm no breaking changes
        - [ ] Check security implications
        
        ### Post-deployment Tasks
        - [ ] Verify production deployment
        - [ ] Monitor application health
        - [ ] Update documentation if needed
        
        **Auto-generated by GitHub Actions** ðŸ¤–
        EOF
        )" \
          --base main \
          --head develop
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}