# Multi-stage Docker build for testing the N-Dimensional Geometry Engine
# Based on the CI/CD checklist and best practices from CLAUDE.md

# Build stage
FROM python:3.11-slim as builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Java for testing Java bridge functionality
RUN apt-get update && apt-get install -y \
    openjdk-11-jdk \
    && rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements-dev.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r requirements-dev.txt

# Production/Test stage
FROM python:3.11-slim as test

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    openjdk-11-jdk \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set JAVA_HOME
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Create app directory and user
RUN groupadd -r appuser && useradd -r -g appuser appuser
WORKDIR /app

# Copy source code
COPY . .

# Ensure Java files are executable
RUN chmod +x *.java || true

# Change ownership to appuser
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import geometry_engine; print('Geometry engine OK')" || exit 1

# Default command runs the comprehensive test suite
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=.", "--cov-report=term-missing", "--cov-report=html", "--junit-xml=test-results.xml", "--html=test-report.html", "--self-contained-html"]

# Alternative commands for specific test types:
# Core tests only:        pytest tests/test_core.py -v
# API tests only:         pytest tests/test_api_integration.py -v
# Performance tests:      pytest tests/test_performance.py -v --benchmark-only
# Mathematical tests:     pytest tests/test_mathematics.py -v
# All tests with coverage: pytest tests/ -v --cov=. --cov-report=html

# Build and run instructions:
# docker build -f Dockerfile.test -t geometry-engine-test .
# docker run --rm geometry-engine-test
# docker run --rm -v $(pwd)/htmlcov:/app/htmlcov geometry-engine-test  # Get coverage report